#!/bin/sh

me=post/initial

usg () {
    cat <<EOF
$me -o gnuplot|punto skel.file punto.file
EOF
}

output=gnuplot
while test $# -ne 0
do case "$1" in
       -h) usg
	   exit 2
	   ;;
       -o) shift
	   if test $# -eq 0
	   then echo >&2 "$me: -o needs an argument"
		exit 2
	   fi
	   case "$1" in
	       skel|gnuplot) ;;
	       *) echo >&2 "$me: unknown output type '$1'"
		  exit 2
		  ;;
	   esac
	   output="$1"
	   shift
	   ;;
       -*) echo >&2 "$me: unknown option '$1'"
	   exit 2
	   ;;
       *) break
   esac
done

skel=$1
shift
if ! test -f "$skel"
then echo >&2 "$me: not a file '$skel'"
     exit 1
fi

punto=$1
shift
if ! test -f "$punto"
then echo >&2 "$me: not a file '$punto'"
     exit 1
fi

"${AWK=awk}" -v output="$output" -v skel="$skel" -v punto="$punto" -v me="$me" '
BEGIN {
   getline < skel
   if ("" $0 != "SKEL") {
       printf "%s: not a skel file '\''%s'\''\n", me, skel | "cat >&2"
       printf "%s: expected SKEL got '\''%s'\''\n", me, $0 | "cat >&2"
       exit(2)
   }
   getline < skel
   nv = $1
   np = $2
   for (i = 0; i < nv; i++)
       if (getline < skel != 1) {
	   printf "%s: fail to read '\''%s'\''\n", me, punto | "cat >&2"
	   exit(2)
       }

   for (i = 0; i < np; i++) {
       if (getline < skel != 1) {
	   printf "%s: fail to read '\''%s'\''\n", me, punto | "cat >&2"
	   exit(2)
       }
       line[i] = $0
   }

   for (i = 0; i < nv; i++) {
       if (getline < punto != 1) {
	   printf "%s: fail to read line '\''%d'\'' from '\''%s'\''\n", me, i, punto | "cat >&2"
	   exit(2)
       }
       if (NF < 2) {
	   printf "%s: fail to parse line '\''%d'\'' from '\''%s'\''\n", me, i, punto | "cat >&2"
	   exit(2)
       }
       x[i] = $1
       y[i] = $2
       ksi[i] = $3
       ksi0[i] = $4
   }

   if (output == "skel") {
       print "SKEL"
       print nv, np
       for (i = 0; i < nv; i++)
	   print x[i], y[i], 0
       for (i = 0; i < np; i++)
	   print line[i], rgb(i)
   } else {
       for (i = 0; i < np; i++) {
	   if (i > 0)
	       printf "\n"
	   n = split(line[i], a)
	   for (j = 2; j <= n; j++) {
	       k = a[j]
	       print x[k], y[k], i, ksi[k], ksi0[k]
	   }
       }
   }
}

function rgb(i,   color) {
    n = split("0 0 1,0 1 0,1 0 0", color, ",")
    i = i % n
    return color[i + 1]
}
'
